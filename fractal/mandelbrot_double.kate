//kage:unit pixels
package main

var Resolution vec2
var Offset vec2
var ScalingFactor float
var Iterations float

const MAX_ITERATIONS = 10000.

func cmul(a, b vec2) vec2 {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x)
}

// www.iquilezles.org/articles/palettes
// www.dev.thi.ng/gradients
func palette(t float) vec3 {
	a := vec3(.5, .5, .5)
	b := vec3(.5, .5, .5)
	c := vec3(1., 1., 1.)
	d := vec3(.263, .416, .557)

	return a + b * cos( 8.28318 * (c*t + d) )
}


func mandelbrot_perturbation(c, dc vec2, iterations float) float {
    var z vec2 = vec2(0.0)
    var dz vec2 = vec2(0.0)
    for i := 0.; i < MAX_ITERATIONS; i++ {
        dz = cmul(2.0*z + dz, dz) + dc
        z = cmul(z, z) + c
        if dot(dz, dz) > 4.0 {
            return i / iterations
        }
        if i >= iterations{
		    	return 0.
    		}
    }
    return 0.0
}

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4) vec4 {
    var uv vec2 = (targetCoords.xy * 2.0 - Resolution) / Resolution.y
    var c vec2 = -Offset
    var dc vec2 = uv * ScalingFactor
    var iterations float = mandelbrot_perturbation(c, dc, Iterations)
    var colorResult vec3 = palette(iterations)

    var crossThickness float = 0.005  // Regola lo spessore del puntatore
    var visibilityRadius float = 0.1
    if length(uv) < visibilityRadius && (abs(uv.x) < crossThickness || abs(uv.y) < crossThickness) {
        colorResult = vec3(1.0, 1.0, 1.0) // Colore bianco per il puntatore
    }

    return vec4(colorResult, 1.0)
}
